@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using AcademicTimePlanner.Store.State.ProjectFiles

<PageTitle>AcademicTimePlanner</PageTitle>

@if (ProjectState.Value.Step == ProjectFilesState.CreationStep.NotCreating)
{
    @if (ProjectState.Value.Loaded)
    {
        <p>@PlanProjectsNames.Count Plan projects loaded</p>
    }

    <InputFile OnChange="@LoadPlanProjects" multiple />

    @if (ProjectState.Value.Loaded)
    {
        <ul>
            @foreach (var name in PlanProjectsNames)
            {
                <li>@name</li>
            }
        </ul>
    }

    <p></p>
    <button type="button" class="btn btn-primary" @onclick="CreatePlanProject">Create plan project</button>
    <p></p>
    <EditForm Model="@downloader" OnValidSubmit="@InitializePlanProjectDownload">
        <label>Plan project to download: </label>
        <InputSelect @bind-Value="downloader.ProjectName">
            <option value="">Select project ...</option>
            @foreach (var name in PlanProjectsNames)
            {
                <option value=@name>@name</option>
            }
        </InputSelect>
        <button type="submit">Download</button>
    </EditForm>
}

@if (ProjectState.Value.IsDownloading)
{
    @DownloadPlanProject();
    ProjectState.Value.IsDownloading = false;
}

@switch (ProjectState.Value.Step) 
{
    case ProjectFilesState.CreationStep.NamingProject :
        <label>Create plan project</label>
        <EditForm Model="@planProject">
            <label>Plan project name : <InputText id="projectName" @bind-Value="planProject!.Name" /></label>
        </EditForm>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnableTasks))">Next</button>
        break;
    case ProjectFilesState.CreationStep.EnableTasks :
        <label>Create plan tasks (Optional)</label>
        <EditForm Model="@planTask" OnValidSubmit="@CreatePlanTask">
            <label>Plan task name : <InputText id="taskName" @bind-Value="planTask!.Name" /></label>
            <button type="submit">Create task</button>
        </EditForm>
        @if (planProject!.PlanTasks.Count != 0) 
        {
            <label>Plan tasks created</label>
            <ul>
                @foreach (var task in planProject.PlanTasks)
                {
                    <li>@task.Name</li>
                }
            </ul>
        }
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.NamingProject))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;
    case ProjectFilesState.CreationStep.EnterEntries :
        <label>Create plan entries or plan entry repertitions</label>
        <button type="button" class="btn btn-secondary" @onclick="AddSingleEntry">Add plan entry</button>
        <button type="button" class="btn btn-secondary" @onclick="AddRepetitionEntry">Add repetition entry</button>
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnableTasks))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.FinalOverview))">Next</button>
        break;
    case ProjectFilesState.CreationStep.AddSingleEntry :
        <label>Create plan entries</label>
        <EditForm Model="@planEntry" OnValidSubmit="@CreatePlanEntry">
            <label>Plan entry name : <InputText id="entryName" @bind-Value="planEntry!.Name" /></label>
            <label>Start date: <InputDate id="StartDate" @bind-Value="planEntry!.StartDate" /></label>
            <label>End date: <InputDate id="EndDate" @bind-Value="planEntry!.EndDate" /></label>
            <label>Time investment [in hours] : <InputNumber id="Duration" @bind-Value="planEntry!.Duration" /></label>
            <button type="submit">Create entry</button>
        </EditForm>
        @if (planProject!.PlanEntries.Count != 0)
        {
            <label>Plan entries created</label>
            <ul>
                @foreach (var entry in planProject.PlanEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;
    case ProjectFilesState.CreationStep.AddRepetitionEntry :
        <label>Create plan entry repetitions</label>
        <EditForm Model="@planEntryRepetition" OnValidSubmit="@CreateRepetitionEntry">
            <label>Plan entry repetition name : <InputText id="repetitionEntryName" @bind-Value="planEntryRepetition!.Name" /></label>
            <label>Start date: <InputDate id="RepetitionStartDate" @bind-Value="planEntryRepetition!.RepetitionStartDate" /></label>
            <label>End date: <InputDate id="RepetitionEndDate" @bind-Value="planEntryRepetition!.RepetitionEndDate" /></label>
            <label>Time investment [in hours] : <InputNumber id="RepetitionDuration" @bind-Value="planEntryRepetition!.Duration" /></label>
            <label>Intervall [in days] : <InputNumber id="RepetitionDuration" @bind-Value="planEntryRepetition!.Interval" /></label>
            <button type="submit">Create repetition entry</button>
        </EditForm>
        @if (planProject!.RepetitionEntries.Count != 0)
        {
            <label>Plan entry repetitions created</label>
            <ul>
                @foreach (var entry in planProject.RepetitionEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;
    case ProjectFilesState.CreationStep.FinalOverview :
        <label>Final overview</label>
        <label>Plan project name</label>
        @if (planProject.Name != null) 
        {
            <li>@planProject.Name</li>
        }
        else 
        {
            <li>No plan project name chosen</li>
        }
        @if (planProject!.PlanTasks.Count != 0)
        {
            <label>Plan tasks created</label>
            <ul>
                @foreach (var task in planProject.PlanTasks)
                {
                    <li>@task.Name</li>
                }
            </ul>
        }
        else
        {
            <li>No plan tasks created</li>
        }
        @if (planProject!.PlanEntries.Count != 0)
        {
            <label>Plan entries created</label>
            <ul>
                @foreach (var entry in planProject.PlanEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        else
        {
            <li>No plan entry created</li>
        }
        @if (planProject!.RepetitionEntries.Count != 0)
        {
            <label>Plan entry repetitions created</label>
            <ul>
                @foreach (var entry in planProject.RepetitionEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        else
        {
            <li>No plan repetition entry created</li>
        }
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="Finish">Finish</button>
        break;
    default : break;
}