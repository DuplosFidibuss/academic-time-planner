@page "/planProjects"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using AcademicTimePlanner.Store.State.ProjectFiles

<PageTitle>AcademicTimePlanner</PageTitle>

@if (_projectState.Value.Step == ProjectFilesState.CreationStep.NotCreating)
{
    @if (_projectState.Value.Loaded)
    {
        <p>@_projects.Count Plan projects loaded</p>
    }

    <InputFile OnChange="@LoadPlanProjects" multiple />
    <p></p>

    @if (_projectState.Value.Loaded)
    {
        <h6>Loaded plan projects:</h6>
        <ul>
            @foreach (var planProject in _projects)
            {
                <li>
                    @planProject.Name
                    <button type="button" @onclick="(e => EditPlanProject(e, planProject))">Edit</button>
                    <button type="button" @onclick="(e => DeletePlanProject(e, planProject.Id))">Delete</button>
                    <button type="button" @onclick="(e => DownloadPlanProject(planProject))">Download</button>
                </li>
            }
        </ul>
    }
    <p></p>
    <button type="button" class="btn btn-primary" @onclick="CreatePlanProject">Create plan project</button>
}

@switch (_projectState.Value.Step) 
{
    case ProjectFilesState.CreationStep.NamingProject :
        <h3>Name plan project</h3>

        <EditForm Model="@_planProject">
            <p>Plan project name : <InputText id="projectName" @bind-Value="_planProject!.Name" /></p>
        </EditForm>

        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnableTasks))">Next</button>
        break;

    case ProjectFilesState.CreationStep.EnableTasks :
        <h3>Create plan tasks (Optional)</h3>

        <p>Name cannot be empty.</p>
        <EditForm Model="@_planTask" OnSubmit="@CreatePlanTask">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>Plan task name : <InputText id="taskName" @bind-Value="_planTask!.Name" /></label>
            <button type="submit">Create task</button>
        </EditForm>

        @if (_planProject!.PlanTasks.Count != 0) 
        {
            <label>Plan tasks created</label>
            <ul>
                @foreach (var task in _planProject.PlanTasks)
                {
                    <li>@task.Name <button type="button" @onclick="(e => DeletePlanTask(e, task))">Delete</button></li>
                }
            </ul>
        }
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.NamingProject))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;

    case ProjectFilesState.CreationStep.EnterEntries :
        <h3>Edit plan entries and plan entry repertitions</h3>
        <button type="button" class="btn btn-secondary" @onclick="AddSingleEntry">Add plan entry</button>
        <button type="button" class="btn btn-secondary" @onclick="AddRepetitionEntry">Add repetition entry</button>
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnableTasks))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.FinalOverview))">Next</button>
        break;

    case ProjectFilesState.CreationStep.AddSingleEntry :
        <h3>Edit plan entries</h3>

        <ul>
           <li>Name cannot be empty.</li>
           <li>Start date cannot be after end date.</li>
           <li>Time investment cannot be longer than timespan between start and end date.</li>
           <li>Time investment must be greater than 0.</li>
       </ul>

        <EditForm Model="@_planEntry" OnSubmit="@CreatePlanEntry">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <p>Plan entry name : <InputText id="entryName" @bind-Value="_planEntry!.Name" /></p>
            <p>Start date: <InputDate id="StartDate" @bind-Value="_planEntry!.StartDate" /></p>
            <p>End date: <InputDate id="EndDate" @bind-Value="_planEntry!.EndDate" /></p>
            <p>Time investment [in hours] : <InputNumber id="Duration" @bind-Value="_planEntry!.Duration" /></p>
            <label>Link plan task (optional): </label>
            <InputSelect @bind-Value="_planEntry.TaskId">
                <option value="@Guid.Empty"></option>
                @foreach (var task in _planProject.PlanTasks)
                {
                    <option value=@task.Id>@task.Name</option>
                }
            </InputSelect>
            <p></p>
            <button type="submit">Create entry</button>
        </EditForm>

        @if (_planProject!.PlanEntries.Count != 0)
        {
            <label>Plan entries created</label>
            <ul>
                @foreach (var entry in _planProject.PlanEntries)
                {
                    <li>@entry.Name <button type="button" @onclick="(e => DeletePlanEntry(e, entry))">Delete</button></li>
                }
            </ul>
        }
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;

    case ProjectFilesState.CreationStep.AddRepetitionEntry :
        <h3>Edit plan entry repetitions</h3>

       <ul>
           <li>Name cannot be empty.</li>
           <li>Start date cannot be after end date.</li>
           <li>Interval cannot be longer than timespan between start and end date.</li>
           <li>Interval must be greater than 0.</li>
           <li>Default Timespan is equal to Interval.</li>
           <li>Timespan starts at the same day as Interval.</li>
           <li>Timespan cannot be longer than Interval.</li>
           <li>Timespan must be greater than 0.</li>
           <li>Time investment cannot be longer than Timespan.</li>
           <li>Time investment must be greater than 0.</li>
       </ul>

        <EditForm Model="@_planEntryRepetition" OnSubmit="@CreatePlanEntryRepetition">
            <p>Plan entry repetition name : <InputText id="repetitionEntryName" @bind-Value="_planEntryRepetition!.Name" /></p>
            <p>Start date: <InputDate id="RepetitionStartDate" @bind-Value="_planEntryRepetition!.RepetitionStartDate" /></p>
            <p>End date: <InputDate id="RepetitionEndDate" @bind-Value="_planEntryRepetition!.RepetitionEndDate" /></p>
            <p>Interval [in days] : <InputNumber id="RepetitionDuration" @bind-Value="_planEntryRepetition!.Interval" /></p>
            <p>Timespan [in days] : <InputNumber id="RepetitionTimespan" @bind-Value="_planEntryRepetition!.TimeSpan" /></p>
            <p>Time investment [in hours] : <InputNumber id="RepetitionDuration" @bind-Value="_planEntryRepetition!.Duration">
                <option value="planEntryRepetition.Zero"></option> </InputNumber></p>

            <label>Link plan task (optional): </label>
            <InputSelect @bind-Value="_planEntryRepetition.TaskId">
                <option value="@Guid.Empty"></option>
                @foreach (var task in _planProject.PlanTasks)
                {
                    <option value=@task.Id>@task.Name</option>
                }
            </InputSelect>

            <p></p>
            <button type="submit">Create repetition entry</button>
        </EditForm>

        @if (_planProject!.RepetitionEntries.Count != 0)
        {
            <label>Plan entry repetitions created</label>
            <ul>
                @foreach (var entry in _planProject.RepetitionEntries)
                {
                    <li>@entry.Name <button type="button" @onclick="(e => DeletePlanEntryRepetition(e, entry))">Delete</button></li>
                }
            </ul>
        }
        <p></p>
        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Next</button>
        break;

    case ProjectFilesState.CreationStep.FinalOverview :
        <h3>Final overview</h3>
        @if (_planProject.Name != null) 
        {
            <p>@_planProject.Name</p>
        }
        else 
        {
            <p style="color: red">No plan project name chosen</p>
        }

        @if (_planProject!.PlanTasks.Count != 0)
        {
            <label>Plan tasks created</label>
            <ul>
                @foreach (var task in _planProject.PlanTasks)
                {
                    <li>@task.Name</li>
                }
            </ul>
        }
        else
        {
            <p>No plan tasks created</p>
        }

        @if (_planProject!.PlanEntries.Count != 0)
        {
            <label>Plan entries created</label>
            <ul>
                @foreach (var entry in _planProject.PlanEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        else
        {
            <p>No plan entry created</p>
        }

        @if (_planProject!.RepetitionEntries.Count != 0)
        {
            <label>Plan entry repetitions created</label>
            <ul>
                @foreach (var entry in _planProject.RepetitionEntries)
                {
                    <li>@entry.Name</li>
                }
            </ul>
        }
        else
        {
            <p>No plan repetition entry created</p>
        }

        <button type="button" class="btn btn-primary" @onclick="@(e => NextOrBack(ProjectFilesState.CreationStep.EnterEntries))">Back</button>
        <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
        <button type="button" class="btn btn-primary" @onclick="Finish">Finish</button>
        break;

    default : break;
}